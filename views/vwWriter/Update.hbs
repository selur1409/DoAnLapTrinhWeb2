<form method="POST" id="formPost">
  <div id="alert"></div>
  {{#if NotFound}}
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <h4 class="alert-heading"><i class="fa fa-exclamation-circle"></i>This article has been published or approved!</h4>
    </div>
  {{/if}}
  <div class="card">
    <div class="card-header">
        <h4>Modify Content</h4>
        <input type="hidden" id="IdPost" name="IdPost" value="{{Id}}">
    </div>
    <div class="card-body">
        <div class="form-group">
            <label for="IdTitle">Title</label>
            <textarea name="Title" id="IdTitle" class="form-control" cols="30" rows="1" form="formPost">{{Title}}</textarea>
        </div>
        <div class="form-group">
            <label for="IdBriefCont">Summary Content</label>
            <textarea name="BriefCont" id="IdBriefCont" class="form-control" cols="30" rows="5"  form="formPost">{{{FullCont}}}</textarea>
        </div>
        <div class="form-group">
            <label for="IdFullCont">Content</label>
            <textarea name="FullCont" id="IdFullCont" class="form-control" cols="30" rows="10"  form="formPost">{{{BriefCont}}}</textarea>
        </div>
        <div class="form-group">
          <label for="">Categories</label>
          <select class="custom-select custom-select-lg mb-3" name="Categories">
            <option value="" selected="selected">Select an option...</option>
            {{#each this.ListCat }}
            <optgroup label="{{Name}}">
                {{#load_sub_cat ../ListSubCat Id}}
                    <option value="{{this.Id}}">{{Name}}</option>
                {{/load_sub_cat}}
            </optgroup>
            {{/each}}
          </select>
        </div>
        <div class="form-group">
          <label for="">Tags</label>
          <div class="row">
            {{#each this.ListTag}}
              <div class="col">
                  <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="checkbox{{@index}}"  value="{{Id}}">
                    <label class="custom-control-label" for="checkbox{{@index}}">{{this.Name}}</label>
                  </div>
              </div>
              {{{count_index @index}}}
            {{/each}}
          </div>
        </div>
    </div>
    <div class="card-footer">
      <button type="submit" class="btn btn-lg btn-success btn-block" id="submit">
        <i class="fa fa-check" aria-hidden="true"></i>
        Submit
      </button>
    </div>
    <div class="row justify-content-center p-3">
      <a class="btn btn-outline-primary" href="{{Url}}" role="button">Go Back</a>
    </div>
  </div>
</form>


{{#section 'js'}}
<script src="https://cdn.tiny.cloud/1/ilpxmudgw3esovltoi6856rdmxd85dk15dunkemmkwt2pbt8/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
<script>
tinymce.init({
  selector: '#IdFullCont',
  height: 500,
  plugins: [
    "advlist autolink lists link image charmap print preview anchor",
    "searchreplace visualblocks code fullscreen",
    "insertdatetime media table paste imagetools wordcount"
  ],
  toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image",
});

tinymce.init({
    selector: '#IdBriefCont',
    /*plugins: [
    "advlist autolink lists link image charmap print preview anchor",
    "searchreplace visualblocks code fullscreen",
    "insertdatetime media table paste imagetools wordcount"
    ],*/
    toolbar: "undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image",
});

 function checkbox() {
    const ckbox = document.getElementsByClassName("custom-control-input");
    let arrchkbox = [];
    for (let i = 0; i < ckbox.length; i++) {
      ckbox[i].addEventListener('change', function () {
        if (ckbox[i].checked) {
          arrchkbox.push(document.getElementById("checkbox" + i).value);
        }
        else{
          arrchkbox.pop(document.getElementById("checkbox" + i).value);
        }
      });
    }
    return arrchkbox;
  }

   function attendConference() {
        const form = document.getElementById("formPost");
        const btnSubmit = document.getElementById("submit");
        const arrChecked = checkbox();
        const id = document.getElementById("IdPost").value;
        btnSubmit.addEventListener("click", function () {
            tinymce.triggerSave();
            event.preventDefault();
            const xhttp = new XMLHttpRequest();
            const FD = new FormData(form);
            FD.append("arrCheck", JSON.stringify(arrChecked));
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    console.log('Success!');
                    console.log(arrChecked);
                    const data = xhttp.responseText;
                    const dataParsed = JSON.parse(data);
                    if(dataParsed.hasOwnProperty('success'))
                    {
                      document.getElementById("alert").innerHTML = Handlebars.templates.Success({success:dataParsed.success});
                      $("#myModal").modal("show"); 
                    }
                    else
                    {
                      document.getElementById("alert").innerHTML = Handlebars.templates.Warning({warning:dataParsed.fail});
                      $("#myModal").modal("show");
                    }
                    
                }
            }
            xhttp.open("POST", "/write/Update/?id=" + id, true);
            xhttp.send(FD);
        }, true)
    }

    window.onload = function(){
        checkbox();
        attendConference(); 
    };
        
</script>
{{/section}}