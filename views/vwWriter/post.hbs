
<form method="POST" id="formPost">
  <div id="alert"></div>
  <div class="card">
    <div class="card-header">
        <h4>New Content</h4>
    </div>
    <div class="card-body">
        <div class="form-group">
            <label for="IdTitle">Title</label>
            <textarea name="Title" id="IdTitle" class="form-control" cols="30" rows="1" form="formPost"></textarea>
        </div>
        <div class="form-group">
            <label for="IdBriefCont">Summary Content</label>
            <textarea name="BriefCont" id="IdBriefCont" class="form-control" cols="30" rows="5"  form="formPost"></textarea>
        </div>
        <div class="form-group">
            <label for="IdFullCont">Content</label>
            <textarea name="FullCont" id="IdFullCont" class="form-control" cols="30" rows="10"  form="formPost"></textarea>
        </div>
        <div class="form-group">
          <label for="">Categories</label>
          <select class="custom-select custom-select-lg mb-3" name="Categories">
            <option value="" selected="selected">Select an option...</option>
            {{#each this.ListCat }}
            <optgroup label="{{Name}}">
                {{#load_sub_cat ../ListSubCat Id}}
                    <option value="{{this.Id}}">{{Name}}</option>
                {{/load_sub_cat}}
            </optgroup>
            {{/each}}
          </select>
        </div>
        <div class="form-group">
          <label for="">Tags</label>
          <div class="row">
            {{#each this.ListTag}}
              <div class="col">
                  <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="checkbox{{@index}}"  value="{{Id}}">
                    <label class="custom-control-label" for="checkbox{{@index}}">{{this.Name}}</label>
                  </div>
              </div>
              {{{count_index @index}}}
            {{/each}}
          </div>
        </div>
    </div>
    <div class="card-footer">
      <button type="submit" class="btn btn-lg btn-success btn-block" id="submit">
        <i class="fa fa-check" aria-hidden="true"></i>
        Submit
      </button>
    </div>
  </div>
</form>
{{#section 'js'}}
<script src="https://cdn.tiny.cloud/1/ilpxmudgw3esovltoi6856rdmxd85dk15dunkemmkwt2pbt8/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
<script>
tinymce.init({
  selector: '#IdTitle',
  toolbar: "undo redo | styleselect | forecolor backcolor | bold italic | fontselect fontsizeselect | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent",
})
tinymce.init({
  selector: '#IdFullCont',
  plugins: 'print preview paste importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap quickbars emoticons',
  imagetools_cors_hosts: ['picsum.photos'],
  menubar: 'file edit view insert format tools table help',
  toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl',
  toolbar_sticky: true,
  autosave_ask_before_unload: true,
  autosave_interval: "30s",
  autosave_prefix: "{path}{query}-{id}-",
  autosave_restore_when_empty: false,
  autosave_retention: "2m",
  image_advtab: true,
  content_css: '//www.tiny.cloud/css/codepen.min.css',
  link_list: [
    { title: 'My page 1', value: 'http://www.tinymce.com' },
    { title: 'My page 2', value: 'http://www.moxiecode.com' }
  ],
  image_list: [
    { title: 'My page 1', value: 'http://www.tinymce.com' },
    { title: 'My page 2', value: 'http://www.moxiecode.com' }
  ],
  image_class_list: [
    { title: 'None', value: '' },
    { title: 'Some class', value: 'class-name' }
  ],
  importcss_append: true,
  file_picker_callback: function (callback, value, meta) {
    /* Provide file and text for the link dialog */
    if (meta.filetype === 'file') {
      callback('https://www.google.com/logos/google.jpg', { text: 'My text' });
    }

    /* Provide image and alt text for the image dialog */
    if (meta.filetype === 'image') {
      callback('https://www.google.com/logos/google.jpg', { alt: 'My alt text' });
    }

    /* Provide alternative source and posted for the media dialog */
    if (meta.filetype === 'media') {
      callback('movie.mp4', { source2: 'alt.ogg', poster: 'https://www.google.com/logos/google.jpg' });
    }
  },
  templates: [
    { title: 'New Table', description: 'creates a new table', content: '<div class="mceTmpl"><table width="98%%"  border="0" cellspacing="0" cellpadding="0"><tr><th scope="col"> </th><th scope="col"> </th></tr><tr><td> </td><td> </td></tr></table></div>' },
    { title: 'Starting my story', description: 'A cure for writers block', content: 'Once upon a time...' },
    { title: 'New list with dates', description: 'New List with dates', content: '<div class="mceTmpl"><span class="cdate">cdate</span><br /><span class="mdate">mdate</span><h2>My List</h2><ul><li></li><li></li></ul></div>' }
  ],
  template_cdate_format: '[Date Created (CDATE): %m/%d/%Y : %H:%M:%S]',
  template_mdate_format: '[Date Modified (MDATE): %m/%d/%Y : %H:%M:%S]',
  height: 600,
  image_caption: true,
  quickbars_selection_toolbar: 'bold italic | quicklink h2 h3 blockquote quickimage quicktable',
  noneditable_noneditable_class: "mceNonEditable",
  toolbar_mode: 'sliding',
  contextmenu: "link image imagetools table",
});

tinymce.init({
    selector: '#IdBriefCont',
     plugins: 'print preview paste importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools textpattern noneditable help charmap quickbars emoticons',
  imagetools_cors_hosts: ['picsum.photos'],
  menubar: 'file edit view insert format tools table help',
  toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl',
  toolbar_sticky: true,
  autosave_ask_before_unload: true,
  autosave_interval: "30s",
  autosave_prefix: "{path}{query}-{id}-",
  autosave_restore_when_empty: false,
  autosave_retention: "2m",
  image_advtab: true,
  content_css: '//www.tiny.cloud/css/codepen.min.css',
  link_list: [
    { title: 'My page 1', value: 'http://www.tinymce.com' },
    { title: 'My page 2', value: 'http://www.moxiecode.com' }
  ],
  image_list: [
    { title: 'My page 1', value: 'http://www.tinymce.com' },
    { title: 'My page 2', value: 'http://www.moxiecode.com' }
  ],
  image_class_list: [
    { title: 'None', value: '' },
    { title: 'Some class', value: 'class-name' }
  ],
  importcss_append: true,
  file_picker_callback: function (callback, value, meta) {
    /* Provide file and text for the link dialog */
    if (meta.filetype === 'file') {
      callback('https://www.google.com/logos/google.jpg', { text: 'My text' });
    }

    /* Provide image and alt text for the image dialog */
    if (meta.filetype === 'image') {
      callback('https://www.google.com/logos/google.jpg', { alt: 'My alt text' });
    }

    /* Provide alternative source and posted for the media dialog */
    if (meta.filetype === 'media') {
      callback('movie.mp4', { source2: 'alt.ogg', poster: 'https://www.google.com/logos/google.jpg' });
    }
  },
  templates: [
        { title: 'New Table', description: 'creates a new table', content: '<div class="mceTmpl"><table width="98%%"  border="0" cellspacing="0" cellpadding="0"><tr><th scope="col"> </th><th scope="col"> </th></tr><tr><td> </td><td> </td></tr></table></div>' },
    { title: 'Starting my story', description: 'A cure for writers block', content: 'Once upon a time...' },
    { title: 'New list with dates', description: 'New List with dates', content: '<div class="mceTmpl"><span class="cdate">cdate</span><br /><span class="mdate">mdate</span><h2>My List</h2><ul><li></li><li></li></ul></div>' }
  ],
  template_cdate_format: '[Date Created (CDATE): %m/%d/%Y : %H:%M:%S]',
  template_mdate_format: '[Date Modified (MDATE): %m/%d/%Y : %H:%M:%S]',
  height: 300,
  image_caption: true,
  quickbars_selection_toolbar: 'bold italic | quicklink h2 h3 blockquote quickimage quicktable',
  noneditable_noneditable_class: "mceNonEditable",
  toolbar_mode: 'sliding',
  contextmenu: "link image imagetools table",
});

 function checkbox() {
    const ckbox = document.getElementsByClassName("custom-control-input");
    let arrchkbox = [];
    for (let i = 0; i < ckbox.length; i++) {
      ckbox[i].addEventListener('change', function () {
        if (ckbox[i].checked) {
          arrchkbox.push(document.getElementById("checkbox" + i).value);
        }
        else{
          arrchkbox.pop(document.getElementById("checkbox" + i).value);
        }
      });
    }
    return arrchkbox;
  }

   function attendConference() {
        const form = document.getElementById("formPost");
        const btnSubmit = document.getElementById("submit");
        const arrChecked = checkbox();
        btnSubmit.addEventListener("click", function () {
            tinymce.triggerSave();
            event.preventDefault();
            const xhttp = new XMLHttpRequest();
            const FD = new FormData(form);
            FD.append("arrCheck", JSON.stringify(arrChecked));
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    const data = xhttp.responseText;
                    const dataParsed = JSON.parse(data);
                    if(dataParsed.hasOwnProperty('success'))
                    {
                      document.getElementById("alert").innerHTML = Handlebars.templates.Success({success:dataParsed.success});
                      $("#myModal").modal("show"); 
                    }
                    else
                    {
                      document.getElementById("alert").innerHTML = Handlebars.templates.Warning({warning:dataParsed.fail});
                      $("#myModal").modal("show");
                    }
                }
            }
            xhttp.open("POST", "/writer/Writer", true);
            xhttp.send(FD);
        }, true)
    }
    window.onload = function(){
        checkbox();
        attendConference(); 
    };
        
</script>
{{/section}}